name: Scheduled Python Script Run

on:
  schedule:
    - cron: '0 0 * * *'  # This runs daily at midnight UTC
  workflow_dispatch:  # This allows manual triggering

jobs:
  run_script:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v4  # Updated to v4

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5  # Updated to v5
        with:
          python-version: '3.x'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install websockets
        continue-on-error: true

      # Run the Python script
      - name: Run script
        run: python Websocket.py

      # Upload the output as an artifact
      - name: Upload results
        uses: actions/upload-artifact@v4  # Updated to v4
        with:
          name: script-output
          path: output.txt  # Ensure this path matches where output.txt is generated
        if: always()

      # Verify that the output file exists
      - name: Check for script output
        run: |
          if [ ! -f output.txt ]; then
            echo "output.txt was not created. The script may have failed."
            exit 1
          else
            echo "output.txt exists and is ready for upload."
        if: always()

      # Download the artifact for further processing
      - name: Download artifact
        uses: actions/download-artifact@v4  # Updated to v4
        with:
          name: script-output
          path: ./artifact

      # Read and format the content of the artifact
      - name: Read and format artifact content
        id: read_artifact
        run: |
          if [ -f ./artifact/output.txt ]; then
            content=$(cat ./artifact/output.txt)
            echo "Content: $content"
            echo "::set-output name=content::$content"
          else
            echo "No output.txt file found."
            echo "::set-output name=content::No output.txt file found."
        shell: bash

      # Post results to Slack in chunks if necessary
      - name: Post to Slack
        run: |
          echo "Posting to Slack..."
          output="${{ steps.read_artifact.outputs.content }}"
          echo "Output length: ${#output}"
          # Split the output into chunks of 3000 characters
          output_length=${#output}
          chunk_size=3000
          start=0
          while [ $start -lt $output_length ]; do
            end=$((start + chunk_size))
            chunk="${output:$start:$chunk_size}"
            echo "Sending chunk from $start to $end"
            echo "Chunk content: $chunk"
            curl -X POST -H 'Content-type: application/json' --data "{
              \"text\": \"Workflow: ${{ github.workflow }}\nStatus: ${{ job.status }}\n${{ github.event_name == 'workflow_dispatch' && 'Manually triggered' || 'Scheduled run' }}\n${{ github.event.head_commit.message }}\nOutput (chunk $start to $end):\n$chunk\"
            }" ${{ secrets.SLACK_WEBHOOK }}
            start=$end
          done
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: always()  # This ensures the Slack message is sent whether the job succeeds or fails
