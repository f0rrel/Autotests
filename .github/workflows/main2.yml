name: Making One Bet
on:
  schedule:
    - cron: '0 0 * * *'  # This runs daily at midnight UTC
  workflow_dispatch:  # This allows manual triggering

jobs:
  run_script:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install websockets requests
      
      - name: Run script
        run: python Websocket.py
      
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: script-output
          path: output.txt
        if: always()
      
      - name: Send Slack message
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          WORKFLOW_NAME: ${{ github.workflow }}
          JOB_STATUS: ${{ job.status }}
          EVENT_TYPE: ${{ github.event_name == 'workflow_dispatch' && 'Manually triggered' || 'Scheduled run' }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          python - <<EOF
          import requests
          import json
          import os

          def read_output_file():
              try:
                  with open('output.txt', 'r') as file:
                      return file.read()
              except FileNotFoundError:
                  return "No output.txt file found."

          webhook_url = os.environ['SLACK_WEBHOOK_URL']
          workflow_name = os.environ['WORKFLOW_NAME']
          job_status = os.environ['JOB_STATUS']
          event_type = os.environ['EVENT_TYPE']
          commit_message = os.environ['COMMIT_MESSAGE']
          output_content = read_output_file()

          payload = {
              "blocks": [
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": f"*Workflow:* {workflow_name}\n*Status:* {job_status}\n*Event:* {event_type}\n*Commit:* {commit_message}"
                      }
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": f"*Output:*\n```{output_content}```"
                      }
                  }
              ]
          }

          response = requests.post(
              webhook_url,
              data=json.dumps(payload),
              headers={'Content-Type': 'application/json'}
          )

          if response.status_code != 200:
              raise ValueError(f'Request to Slack returned an error {response.status_code}, the response is:\n{response.text}')
          else:
              print('Message posted successfully')
          EOF
        shell: python
